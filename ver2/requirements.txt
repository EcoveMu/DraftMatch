比對系統設計 - 專案需求與設計概要
一、您的需求總結
🎯 專案目標：
建立一個自動化比對系統，可核對每年提交給廠商的報告書「美編前原稿（Word）」與「美編後報告書（PDF）」之間的內容異動，取代過往人力逐字校對方式。
🔍 核心需求：
文件來源不同格式：
- 美編前：Word 檔，排版一致、結構清晰。
- 美編後：PDF 檔，排版變動大，含圖片與圖表。
內容差異樣態：
- 段落位置可能異動。
- 表格形式可能改變。
- 文字可能略微調整（標點、斷行、改詞等）。
比對條件要求：
- 需同時支援精確比對與語意相似比對。
- 可設定「比對鬆緊度閾值」。
- 有機制排除不重要差異（例如換行、空格等）。
頁面對應與資料對齊：
- 系統需能自動找出對應的段落/頁面。
- 有處理表格、圖文混排等複雜內容的需求。
人工可介入複查：
- 系統自動標註差異處，使用者可自行檢閱調整。
支援輸出與彙整：
- 比對結果可輸出為 Excel、Word 或 HTML（含高亮標示差異）。
- 顯示統計摘要：段落總數、不一致段落數、缺漏段落等。
未來可擴充：
- 整合帳號系統（Flask）與內部部署（Docker）。
- 加入 ChatGPT API Key 進行語意比對。
二、設計概要方向
🧩 系統架構總覽：

[使用者介面 UI]
        ⇅
[後端邏輯處理模組 (Flask/Streamlit)]
        ⇅
[AI / OCR / 語意比對 API 服務]
        ⇅
[比對引擎模組 (文字、表格)]
        ⇅
[結果輸出與視覺化模組]

🔧 開發步驟說明（建議以 Python 為主）：
步驟 1：系統環境建構
使用 Streamlit 快速建立 Web UI。
如需登入功能，使用 Flask。
支援 Docker 封裝內部部署。
步驟 2：文字抽取模組
Word：使用 python-docx 解析段落與表格。
PDF：使用 pdfplumber、PyMuPDF，必要時整合 OCR（如 Azure Form Recognizer）。
圖表解析：可考慮 layoutparser。
步驟 3：AI 比對模組
基礎比對：difflib 或 SequenceMatcher。
語意比對：整合 GPT API / Sentence-BERT。
設定「比對鬆緊度閾值」，自動篩選「不一致」段落。
步驟 4：差異輸出模組
比對結果輸出為 pandas.DataFrame。
匯出為 Excel (.xlsx) 或 Word (.docx)。
亦可用 HTML / Markdown 方式高亮差異處。
步驟 5：使用者介面整合與互動
UI 顯示：差異表格、高亮差異段落、統計摘要。
使用者可選擇：顯示所有內容 / 僅顯示差異處。
三、附加建議
預留 API Key 輸入欄位（如 ChatGPT / Azure OCR）。
預設比對類型切換（精確比對 / 語意比對）。
若結構改動大，也可提供「人工協助校對流程」的半自動模式。